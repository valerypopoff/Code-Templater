
// This is a named set of variables. The example template that goes with this instruction
// relies on you describing every ACE in a separate set named ACE.

// A named set — just like any other bracket group — limits a namespace. 

{	ACE
	
	@@@ACES_C2_EDITTIME		Condition
	@@@ACES_C3_JSON_TYPE	conditions
	@@@CATEGORY_ID			custom
	@@@CATEGORY_NAME 		Custom

	@@@ID_C2				0
	@@@ID_C3				is-large-number
	@@@FLAGS_C2				cf_none
	@@@HIGHLIGHT			true
	@@@LIST_NAME			Is large number
	@@@DISPLAY_STRING 		Is [i]{0}[/i] a large number. There's also {1} that doesn't matter
	@@@DESCRIPTION 			Test if a number is greater than 100.

	@@@SCRIPT_NAME 			IsLargeNumber


	// This is a good practice to enclose parameters description in a bracket group
	// so it's guaranteed that parameters are in a separate namespace.

	// Params
	{
		// Even though you have multiple parameters in the same namespace, you don't have to 
		// explicitly declare the begining of every one. That's because Templater knows when 
		// the new parameter description starts.

		// Templater knows that this is the new parameter (or any other entity) when
		// it encounters a variable that has already been declared in a current namespace.


		@@@PARAM_TYPE_C2 		AnyTypeParam
		@@@PARAM_TYPE_C3 		any
		@@@PARAM_ID_C3 			comparison-options
		@@@PARAM_LABEL 			Number
		@@@PARAM_DESCRIPTION	Number to test if greater than 100.
		@@@PARAM_INIT_VALUE		50
		

		// @@@PARAM_TYPE_C2 is the first variable that has already been declared earlier 
		// in a current namespace. So here Templater knows that everything that goes below — 
		// corresponds to the second entity. 
		
		// Templater will also remember @@@PARAM_TYPE_C2 as an entity delimiter. So it will 
		// only think that you're describing the third parameter when it encounters 
		// @PARAM_TYPE_C2 again. Until then, EVERYTHING will be considered
		// a part of the second entity.
		
		// Thus, you must start paramater variables list with a variable that every 
		// parameter in a given namespace has. If you wish, you can start every paramater 
		// variables list with a special variable that's never used in the template. 
		// Like: @@@PARAM_START

		// Since you let Templater know where the new parameter starts, the order of the rest 
		// of the variables doesn't matter.
		// VVVVVVVVVVVV
		@@@PARAM_TYPE_C2 		AnyTypeParam
		@@@PARAM_TYPE_C3 		any
		@@@PARAM_ID_C3 			some-param
		@@@PARAM_LABEL 			Some param
		@@@PARAM_DESCRIPTION	An exessive value.
		@@@PARAM_INIT_VALUE		

		// Since namespaces are limited to the { bracket groups }, Templater starts counting 
		// entities in the begining of the namespace and ends counting them in the end of the 
		// namespace. When you open or closing a bracket, Templater starts counting from the 
		// begining. That's why ###SCRIPT below is considered to be a part of the very first 
		// entity and goes with everything that was declared before parameters bracket group.
	}
	
	###SCRIPT
	IsLargeNumber(number)
    {   
        return number > 100;
    }
	###
}

{	ACE
	
	@@@ACES_C2_EDITTIME		Action
	@@@ACES_C3_JSON_TYPE	actions
	@@@CATEGORY_ID			super-custom
	@@@CATEGORY_NAME 		Super custom

	@@@ID_C2				0
	@@@ID_C3				do-alert
	@@@FLAGS_C2				af_none
	@@@HIGHLIGHT			true
	@@@LIST_NAME			Do alert
	@@@DISPLAY_STRING 		Do alert with message {0} and \"{1}\"
	@@@DESCRIPTION 			Do a dummy alert.

	@@@SCRIPT_NAME 			Alert

	
	// Params
	{
		@@@PARAM_TYPE_C2 		StringParam
		@@@PARAM_TYPE_C3 		string
		@@@PARAM_ID_C3 			alert-text
		@@@PARAM_LABEL 			Alert text
		@@@PARAM_DESCRIPTION	Enter alert message.
		@@@PARAM_INIT_VALUE		\"Hello world\"
		
		@@@PARAM_TYPE_C2 		ComboParam
		@@@PARAM_TYPE_C3 		combo
		@@@PARAM_ID_C3 			alert-add-variants
		@@@PARAM_LABEL 			What to add
		@@@PARAM_DESCRIPTION	What to add to the alert message.
		@@@PARAM_INIT_COMBO_C3	dont-call-me
		@@@PARAM_INIT_COMBO_C2	1

		// @@@PARAM_COMBO_ID and @@@PARAM_COMBO_TEXT correspond to the second parameter so they 
		// must go AFTER the regular parameter variables — that is, after the line on which 
		// Templater knows that you're describing the second parameter (in this example this
		// is the line with @@@PARAM_TYPE_C2).
		// 
		// If you put @@@PARAM_COMBO_ID or @@@PARAM_COMBO_TEXT before @@@PARAM_TYPE_C2, 
		// Templater will think these are the first parameter variables.
		
		@@@PARAM_COMBO_ID		dont-care
		@@@PARAM_COMBO_TEXT		And I don't care

		@@@PARAM_COMBO_ID		dont-call-me
		@@@PARAM_COMBO_TEXT		And don't call me Shirley

		@@@PARAM_COMBO_ID		so-kiss-me
		@@@PARAM_COMBO_TEXT		So kiss me darling
	}

	###SCRIPT
	Alert(alert_msg, combo)
	{
		var combo_text;
		switch( combo )
		{
			case 0: combo_text = "And I don't care"; break;
			case 1: combo_text = "And don't call me Shirley"; break;
			case 2: combo_text = "So kiss me darling"; break;
		}

		alert(alert_msg + " " + combo_text);
		alert("By the way, first plugin property = " + this.testProperty);
		alert("By the way, 512 is large = " + this.CNDS.IsLargeNumber(512));

		// These two functions will log to the console
		this.Foo( 1024 );
		this.Bar( "One thousand and twenty four" );
	}
	###
}

{	ACE

	// Every variable in this named set is declared only once, so there's no need to 
	// introduce bracket groups.
	
	@@@ACES_C2_EDITTIME		Expression
	@@@ACES_C3_JSON_TYPE	expressions
	@@@CATEGORY_ID			custom
	@@@CATEGORY_NAME 		Custom

	@@@ID_C2				0
	@@@ID_C3				double
	@@@FLAGS_C2				ef_return_any | ef_variadic_parameters
	@@@RETURN_TYPE_C3		any
	@@@VARIADIC_PARAMS_C3	true
	@@@HIGHLIGHT			true
	@@@LIST_NAME			Double
	@@@DESCRIPTION 			Double a number.

	@@@SCRIPT_NAME 			Double

	###SCRIPT
	Double(ret, number) 
    {
		ret.set_any(number * 2);    	
    }
	###

	###SCRIPT_C3_RUNTIME
	Double(number) 
    {
    	return number * 2;
    }
	###
}
